Word Search
/*
Given an m x n grid of characters board and a string word, return true if word exists in the grid.
The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true
*/

bool helper(vector<vector<char>>& board, string word, int i,int j, int n,int m ,int k)
    {
        if(k>=word.size()) return true;
        if(i<0 || j<0 ||i>=n || j>=m || board[i][j]=='.' || word[k]!=board[i][j]) return false;
        if(word.size()==1 && word[k]==board[i][j]) return true;
        board[i][j]='.';
        bool temp=false;
        int delR[]={-1,0,1,0};
        int delC[]={0,1,0,-1};
        for(int ind=0;ind<4;ind++)
        	 temp= temp ||helper(board,word,i+delR[ind], j+delC[ind],n,m,k+1);
        board[i][j]=word[k];
        return temp;
    }
    bool exist(vector<vector<char>>& board, string word) {
        int n=board.size();
        if(n==0) return false;
        int m=board[0].size();
        if(word.size()==0) return false;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(word[0]==board[i][j])
                    if(helper(board,word,i,j,n,m,0)) return true;
            }
        }
        return false;
    }
